import{_ as l,c as r,b as n,a,d as i,e as t,r as o,o as d}from"./app--Vh3dkqs.js";const p={},c={href:"https://zhida.zhihu.com/search?content_id=224927338&content_type=Article&match_order=1&q=%E5%88%86%E5%B8%83%E5%BC%8F%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6%E7%B3%BB%E7%BB%9F&zd_token=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJ6aGlkYV9zZXJ2ZXIiLCJleHAiOjE3NTkwNzE2MTQsInEiOiLliIbluIPlvI_niYjmnKzmjqfliLbns7vnu58iLCJ6aGlkYV9zb3VyY2UiOiJlbnRpdHkiLCJjb250ZW50X2lkIjoyMjQ5MjczMzgsImNvbnRlbnRfdHlwZSI6IkFydGljbGUiLCJtYXRjaF9vcmRlciI6MSwiemRfdG9rZW4iOm51bGx9.UPqjrzZqjI0hd3dwRmz3R6SyiQfIOAs605zGbm_LK-o&zhida_source=entity",target:"_blank",rel:"noopener noreferrer"},u={href:"https://zhida.zhihu.com/search?content_id=224927338&content_type=Article&match_order=1&q=Linus+Torvalds&zd_token=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJ6aGlkYV9zZXJ2ZXIiLCJleHAiOjE3NTkwNzE2MTQsInEiOiJMaW51cyBUb3J2YWxkcyIsInpoaWRhX3NvdXJjZSI6ImVudGl0eSIsImNvbnRlbnRfaWQiOjIyNDkyNzMzOCwiY29udGVudF90eXBlIjoiQXJ0aWNsZSIsIm1hdGNoX29yZGVyIjoxLCJ6ZF90b2tlbiI6bnVsbH0.WPiwuJAas3IrlKCp0lPNEdyv4RtS0gdkcs6caYaUyyA&zhida_source=entity",target:"_blank",rel:"noopener noreferrer"},h={href:"https://zhida.zhihu.com/search?content_id=224927338&content_type=Article&match_order=1&q=SHA-1+%E5%93%88%E5%B8%8C%E5%80%BC&zd_token=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJ6aGlkYV9zZXJ2ZXIiLCJleHAiOjE3NTkwNzE2MTQsInEiOiJTSEEtMSDlk4jluIzlgLwiLCJ6aGlkYV9zb3VyY2UiOiJlbnRpdHkiLCJjb250ZW50X2lkIjoyMjQ5MjczMzgsImNvbnRlbnRfdHlwZSI6IkFydGljbGUiLCJtYXRjaF9vcmRlciI6MSwiemRfdG9rZW4iOm51bGx9.GeN6vfWwR6nJRJ_--tnEgmE5LRjuTwLsBWTYgZ_gPPc&zhida_source=entity",target:"_blank",rel:"noopener noreferrer"},g={href:"https://link.zhihu.com/?target=https%3A//blog.csdn.net/weixin_39755884/article/details/126437567",target:"_blank",rel:"noopener noreferrer"},m={href:"https://link.zhihu.com/?target=https%3A//blog.csdn.net/weixin_44719880/article/details/129411558",target:"_blank",rel:"noopener noreferrer"},b={href:"https://link.zhihu.com/?target=https%3A//blog.csdn.net/LINING_GG/article/details/127830879",target:"_blank",rel:"noopener noreferrer"};function v(k,e){const s=o("ExternalLinkIcon");return d(),r("div",null,[e[12]||(e[12]=n("h2",{id:"git",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#git"},[n("span",null,"Git")])],-1)),n("p",null,[e[2]||(e[2]=i("Git 是一种",-1)),n("a",c,[e[0]||(e[0]=i("分布式版本控制系统",-1)),t(s)]),e[3]||(e[3]=i("，用于管理软件项目的源代码。它是由 Linux 之父 ",-1)),n("a",u,[e[1]||(e[1]=i("Linus Torvalds",-1)),t(s)]),e[4]||(e[4]=i(" 开发的，并已经成为了现代软件开发领域中最流行的版本控制系统之一。",-1))]),e[13]||(e[13]=a('<p>使用 Git 可以追踪代码的历史修改记录，方便团队协作、代码共享和代码重构。Git 的基本工作流程如下：</p><ol><li>在开始编写代码之前，首先需要创建一个 Git 仓库（repository），用于存储代码和版本历史记录。</li><li>在编写代码时，可以通过 <code>git add</code> 命令将更改的文件添加到 Git 的暂存区（staging area）中。</li><li>通过 <code>git commit</code> 命令将暂存区中的更改提交到 Git 仓库中，并生成一个新的版本号（commit hash）。</li><li>如果需要撤销某个提交，可以使用 <code>git revert</code> 命令来创建一个新的提交，该提交将会抵消先前的提交效果。</li><li>如果需要合并不同分支的代码，可以使用 <code>git merge</code> 命令进行合并。</li><li>如果需要查看代码的历史提交记录，可以使用 <code>git log</code> 命令来获取详细信息。</li><li>如果需要将代码推送到远程仓库，可以使用 <code>git push</code> 命令将本地代码推送到远程仓库。</li><li>如果需要从远程仓库中获取代码，可以使用 <code>git pull</code> 命令将远程代码拉取到本地。</li></ol><p><img src="https://pic1.zhimg.com/v2-73153e41672062a0ec7f3bd095c43b06_1440w.jpg" alt=""></p><ul><li>Workspace：工作区</li><li>Index / Stage：暂存区</li><li>Repository：仓库区（或本地仓库）</li><li>Remote：远程仓库</li></ul><h2 id="svn与git的的区别" tabindex="-1"><a class="header-anchor" href="#svn与git的的区别"><span>SVN与Git的的区别</span></a></h2><p>SVN和Git都是版本控制系统，但它们有以下区别：</p>',6)),n("ol",null,[e[8]||(e[8]=n("li",null,"分布式 vs 集中式：Git 是一种分布式版本控制系统，而 SVN 是一种集中式版本控制系统。在 Git 中，每个开发者都拥有本地代码库的完整副本，可以离线工作并在不同的工作流程之间自由转换。而在 SVN 中，所有开发者共享同一个中央代码库，并且需要有网络连接才能进行版本控制操作。",-1)),e[9]||(e[9]=n("li",null,"分支管理：Git 在分支管理方面比 SVN 更加强大和灵活。Git 的分支非常轻量级，创建和合并分支也很容易，因此可以轻松实现多人协作和并行开发。而在 SVN 中，分支比较重量级（即创建和合并分支需要花费相对更多的时间和资源），因此往往只用于重要的版本分支。",-1)),n("li",null,[e[6]||(e[6]=i("版本号：Git 使用 ",-1)),n("a",h,[e[5]||(e[5]=i("SHA-1 哈希值",-1)),t(s)]),e[7]||(e[7]=i("来标识每个提交，而 SVN 采用递增的数字版本号来标识每个提交。SHA-1 哈希值保证了每个提交的唯一性，而递增版本号则简化了版本控制过程。",-1))]),e[10]||(e[10]=n("li",null,"整体性：由于 SVN 是一种集中式版本控制系统，因此所有数据都存储在中央代码库中。如果中央代码库损坏或丢失，可能会导致数据丢失或无法恢复。而 Git 是一种分布式版本控制系统，每个开发者都拥有完整的代码库副本，保证了代码的整体性和可靠性。",-1)),e[11]||(e[11]=n("li",null,"性能：Git 比 SVN 更快，特别是在处理大型仓库、分支合并以及比较代码差异时。Git 使用基于内容的哈希算法来检测文件是否修改，而 SVN 则需要检查文件的元数据（如时间戳和文件大小）来确定是否修改。",-1))]),e[14]||(e[14]=n("p",null,"总之，虽然 SVN 和 Git 都是版本控制系统，但它们的设计和实现方式存在较大差异，开发人员应根据自身需求选择最适合的版本控制系统。",-1)),e[15]||(e[15]=n("h2",{id:"安装git",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#安装git"},[n("span",null,"安装Git")])],-1)),e[16]||(e[16]=n("p",null,"Windows",-1)),n("p",null,[n("a",g,[t(s)])]),e[17]||(e[17]=n("p",null,"Mac",-1)),n("p",null,[n("a",m,[t(s)])]),e[18]||(e[18]=n("p",null,"Linux",-1)),n("p",null,[n("a",b,[t(s)])]),e[19]||(e[19]=a(`<h2 id="常规操作" tabindex="-1"><a class="header-anchor" href="#常规操作"><span>常规操作</span></a></h2><h3 id="创建版本库" tabindex="-1"><a class="header-anchor" href="#创建版本库"><span>创建版本库</span></a></h3><p>首先，打开终端或命令行界面，进入要创建版本库的目录下。</p><p>接着，使用以下命令初始化一个空的 Git 仓库：</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token function">git</span> init</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>然后，将需要管理的文件添加到暂存区：</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token function">git</span> <span class="token function">add</span> <span class="token operator">&lt;</span>file<span class="token operator">&gt;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>你也可以使用以下命令一次性将所有变更添加到暂存区：</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token function">git</span> <span class="token function">add</span> <span class="token builtin class-name">.</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>接下来，提交暂存区中的变更到本地仓库，并添加一个描述信息：</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token function">git</span> commit <span class="token parameter variable">-m</span> <span class="token string">&quot;Initial commit&quot;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>现在，你已经成功地创建了一个版本库。你可以使用其他 Git 命令来管理它，例如：</p><ul><li><code>git status</code>：查看当前工作区和暂存区的状态。</li><li><code>git log</code>：查看提交记录。</li><li><code>git branch</code>：管理分支。</li><li><code>git remote</code>：管理远程仓库。</li></ul><h3 id="版本回退" tabindex="-1"><a class="header-anchor" href="#版本回退"><span>版本回退</span></a></h3><p>要将Git存储库版本回退，请使用git reset命令。如果您想要撤消上次提交并返回到上一个提交，则可以使用以下命令：</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token function">git</span> reset HEAD~1</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>这将使HEAD指向上一个提交，但不会删除您最新的更改。如果您希望完全返回到以前的提交并放弃所有更改，则可以添加--hard选项：</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token function">git</span> reset <span class="token parameter variable">--hard</span> HEAD~1</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>请注意，此操作将永久删除您最新的更改，请谨慎使用。如果您已经将更改推送到远程存储库，则在执行此操作之前应先备份这些更改。</p><h3 id="理解工作区与暂存区的区别" tabindex="-1"><a class="header-anchor" href="#理解工作区与暂存区的区别"><span><strong>理解工作区与暂存区的区别</strong></span></a></h3><p>Git有三个主要的工作区域：工作区（working directory）、暂存区（staging area）和版本库（repository）。</p><p>工作区是指您电脑文件系统上用于修改文件的目录。在这里，您可以创建、编辑和删除文件。</p><p>暂存区是一个中间状态，它充当了您提交更改的缓冲区。在Git中，您必须明确地将文件添加到暂存区，然后才能将其提交到版本库中。这样做的好处是，您可以对每个更改进行精细控制，并确保只提交需要保存的更改。</p><p>版本库包含Git存储库的所有历史记录和元数据。它是Git存储库的核心组成部分，是由Git自动维护的。</p><p>简而言之，工作区是您正在处理的实际文件，而暂存区是下一次提交所需更改的文件列表。它们之间的区别在于，您可以对工作区中的任何文件进行修改，但只有将它们添加到暂存区并将其提交到版本库中，它们才会成为Git跟踪的部分。</p><h3 id="git撤销修改和删除文件操作" tabindex="-1"><a class="header-anchor" href="#git撤销修改和删除文件操作"><span><strong>Git撤销修改和删除文件操作</strong></span></a></h3><p>要撤销对文件的修改，可以使用git checkout命令：</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token function">git</span> checkout -- <span class="token operator">&lt;</span>filename<span class="token operator">&gt;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>此命令将覆盖工作树中指定文件的更改，还原为最近提交或上次检出的状态。</p><p>要删除文件并将此更改提交到Git存储库中，可以使用git rm命令：</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token function">git</span> <span class="token function">rm</span> <span class="token operator">&lt;</span>filename<span class="token operator">&gt;</span></span>
<span class="line"><span class="token function">git</span> commit <span class="token parameter variable">-m</span> <span class="token string">&quot;Remove file&quot;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>这将从工作树和版本历史记录中删除指定的文件。如果只是想从Git版本库中删除文件但保留在工作树中，则可以使用git rm命令的--cached选项：</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token function">git</span> <span class="token function">rm</span> <span class="token parameter variable">--cached</span> <span class="token operator">&lt;</span>filename<span class="token operator">&gt;</span></span>
<span class="line"><span class="token function">git</span> commit <span class="token parameter variable">-m</span> <span class="token string">&quot;Remove file from repository&quot;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>这将从版本历史记录中删除指定的文件，但保留在工作树中。</p>`,34))])}const f=l(p,[["render",v]]),I=JSON.parse('{"path":"/blogs/frontEnd/Git/gitjibencaozuo.html","title":"Git基本操作","lang":"en-US","frontmatter":{"title":"Git基本操作","date":"2023-03-20 22:52","categories":["frontEnd"],"tags":["Git"]},"headers":[{"level":2,"title":"Git","slug":"git","link":"#git","children":[]},{"level":2,"title":"SVN与Git的的区别","slug":"svn与git的的区别","link":"#svn与git的的区别","children":[]},{"level":2,"title":"安装Git","slug":"安装git","link":"#安装git","children":[]},{"level":2,"title":"常规操作","slug":"常规操作","link":"#常规操作","children":[{"level":3,"title":"创建版本库","slug":"创建版本库","link":"#创建版本库","children":[]},{"level":3,"title":"版本回退","slug":"版本回退","link":"#版本回退","children":[]},{"level":3,"title":"理解工作区与暂存区的区别","slug":"理解工作区与暂存区的区别","link":"#理解工作区与暂存区的区别","children":[]},{"level":3,"title":"Git撤销修改和删除文件操作","slug":"git撤销修改和删除文件操作","link":"#git撤销修改和删除文件操作","children":[]}]}],"git":{"createdTime":1760242844000,"updatedTime":1760242844000,"contributors":[{"name":"doyoudo","email":"1533924921@qq.com","commits":1}]},"filePathRelative":"blogs/frontEnd/Git/git基本操作.md"}');export{f as comp,I as data};
